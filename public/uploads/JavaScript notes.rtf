{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww6780\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 JAVASCRIPT\
\
Precedence - \
\
Parentheses have higher precedence than all operators;\
as such, data contained in parentheses will always \
be evaluated first\
\
NOT (!) is evaluated before\'85\
AND (&&) which is evaluated before\'85\
OR (||)\
\
true || ((!true) && true) equates to \'91true or false\'92, which yields true\
\
\
\
console.log(); can be used similarly to var_dump(); in PHP - it lets us know\
something is happening, and helpfully provides the source file and line\
 in the console log\
\
\
\
property is a variable - it returns a value\
methods are functions within objects\
\
properties and methods are available to use in JavaScript, \
\
\
Ajax Request - asynchronous request; functions similarly to Google maps - \
no page refreshing or loading occurs visibly to the user, an Ajax request is \
sent to the server and the data is inserted on the user end seamlessly -\
JavaScript functions in this way\
\
For in loops - these are a thing in JS; they allow you to iterate through properties of an\
object - we won\'92t be using them in class but it\'92s good to know about:\
\
var array = [\'91test\'92, 1, 3, \'91test again\'92];\
for (var x in array) \{\
	console.log(array[x]);\
\}\
\
The variable defined within the loop (here, var x) represents the array\'92s indices\
\
\
A foreach function does exist in JavaScript at this time:\
\
array.ForEach(function(element, index, array) \{\
	console.log(\'91a[\'91 + index + \'91] = \'91 + element);\
\});\
\
A function is passed as a parameter in this function - this is called a \
callback function\
\
Element represents value, index represents key\
\
Because we used foreach loops to achieve this in PHP, here\'92s an example of looping through an array using a for loop:\
\
var classArray = [\'91stuff\'92, \'91things\'92, \'91more\'92];\
\
for(var i = 0; i < classArray.length; i++) \{\
	console.log(classArray[i]);\
\}\
\
Here we used var i to represent the key of  our array indices - the function .length is used to dynamically determine the final index of the array, even if items are added to it - the key is incremented in each iteration, and the key is passed in (classArray[i]) to call its paired value\
\
\
Break and Continue\
\
Using break: \
\
var random = Math.floor((Math.random()*100)+1);\
\
console.log(\'91Random stopping point is: \'91 + random);\
\
for (var i = 1; i <100;  i++) \{\
\
	console.log(\'91Loop counter is: \'91 + i);\
	\
	if (random == i) \{\
\
		console.log(\'91We have reached the random stopping point; break!\'92); \
		\
		break;\
\
		console.log(\'91You will never see this line.\'92);\
	\}\
\
\}\
\
\
Using continue: \
\
for (var i = 1; i < 100, i++) \{\
\
	if (i % 2 !== 0) \{\
	continue;\
 	\}\
	console.log(\'91Here is a lovely even number: \'91 + i);\
\}\
\
\
\
Functions \
\
Functions in JS are a little more forgiving than in PHP - you can pass more (or less!) arguments than\
are explicitly defined (i.e. param1, param2)  using \'91arguments\'92  - this allows you to pass ANY number of parameters, all will be captured\
\
function doSomething(param1, param2) \{\
	console.log(param1);\
	console.log(param2);\
	console.log(arguments);\
\}\
\
doSomething(\'91arg1\'92, \'91arg2\'92, \'91arg3\'92);\
\
Above, I could pass one, two, three, four, one hundred arguments although two parameters are shown\
\
\
In PHP, functions can be called within functions - pretty cool, right? But in JS, functions can actually be passed AS PARAMETERS in functions. How cool is that?\
\
\
SCOPE\
\
variables declared outside of functions in JS are global - this means that, unlike in PHP, variables declared outside of functions are also accessible WITHIN functions even if they are not passed as arguments - however, variables that are declared only within functions are local; they can be used within the function but will not be returned from it. \
\
var global = \'93I\'92m global mom!\'94;\
\
function globalLocal () \{\
\
var global = \'93Don\'92t let the name fool you - I\'92m local daddy-o!\'94;\
\
\}\
\
globalLocal will return a value of \'93I\'92m global mom!\'94; \'91global\'92 as defined within the function is local and not accessible outside of the function\
\
\
\
var global = \'93I\'92m global mom!\'94;\
\
function globalLocal () \{\
\
global = \'93Don\'92t let the name fool you - I\'92m local daddy-o!\'94;\
\
\}\
\
Now we are not declaring a variable but reassigning the value of our global variable, so global will return a value of \'93Don\'92t let the name fool you - I\'92m local daddy-o!\'94  - removing \'91var\'92 from our variable tells JS \'93hey, I\'92m reassigning my global variable!\'94, and leaving \'91var\'92 in front of the variable tells JS \'93hey, I am declaring a local variable!\'94 even if it has the same name as a global one\
\
\
var global = \'93I\'92m global mom!\'94;\
\
function globalLocal () \{\
\
var local = \'93I\'92m local daddy-o!\'94;\
\
\}\
\
Here it seems more clear - global is global, local is local. If I console.log(global) within the function I will get its value, but local is only known within the function\
\
Hoisting \
\
It sounds complicated, but it isn\'92t. The gist is that you should keep your variables defined at the top of your functions - \
\
\
var global = \'93I\'92m global mom!\'94;\
\
function globalLocal () \{\
\
console.log(global);\
\
var global = \'93Don\'92t let the name fool you - I\'92m local daddy-o!\'94;\
\
console.log(global);\
\
\}\
\
Up above, our initial console.log WILL NOT return \'93I\'92m global mom!\'94 - it will return an undefined, and the second console.log(global) will return the value of our local variable. JS sees that you are defining a local variable, and automatically hoists it up to the top WITHOUT its value attached. It acts as if we have declared an empty local variable that we define later, as if the code read\'85\
\
var global = \'93I\'92m global mom!\'94;\
\
function globalLocal () \{\
\
var global;\
\
console.log(global);\
\
var global = \'93Don\'92t let the name fool you - I\'92m local daddy-o!\'94;\
\
console.log(global);\
\
\}\
\
Well, we did establish that JavaScript is quirky. \
\
\
Arrays - \
\
There are multidimensional arrays in JS but not associative ones\
\
\
(markeross@gmail.com - @markross)\
\
\
OBJECT ORIENTED PROGRAMMING\
\
variables inside of objects are called properties\
\
functions inside of objects are called methods\
\
calling a property: \
\
object.property;\
\
calling a method:\
\
object.method();\
\
\'91this\'92 is a key word that always refers to the object it is within - this can be used within functions and outside of them. Be careful about using \'91this\'92 within an event however.\
\
JavaScript Object Notation (JSON)\
\
API - application programming interface\
\
JSON plugin for Chrome\
\
JSONLint - JSON validator\
\
\
Browser Object Model (BOM) \
\
Window Object\
\
using setInterval\
\
Document Object Model (DOM)\
\
DOM is a child of the window\'a0\
\
ID\'92s are the fastest and easiest way for JS to find an element on a page\
\
Event objects - when an event is triggered, an event object is created and passed into your function\
\
e.preventDefault(); - stops the native behavior of the element targeted; if a submit button in a form, it prevents submission and page refresh; if an anchor tag with a link, it prevents link action from occurring when clicked, etc. \
\
LAYERS - also Russian Nesting Divs (hilarious, right?)\
\
bubbling up the DOM tree - when you click on an element nested within other elements, and they are fired in intuitive order - what is on top goes first (innermost element), what is in the middle goes second, what\'92s on bottom goes last.\
\
capture - when you begin at the outermost thing, then go in one level, and another, etc - when you pass \'91true\'92 as a third parameter this is performed - it reverses the order that occurs with bubbling \
\
\
PHP III - \
\
Superglobals:\
\
data entered into forms using a GET or POST request is always returned in an array\
\
Session - session is persistent data across multiple pages; it enables data to persist from page to page so long as a user is still logged as they navigate a site\
\
get request in the url bar:\
\
codeup.dev/process_form.php?logout=true\
\
? begins our query string\
\
\'91logout\'92 is the key of our $_GET request and \'91true\'92 is its value\
\
Our URL bar essentially reads logout => true\
\
When a user logs out, the script is killed, the session is ended, and the user is sent back to the same page\
\
REMEMBER that the value of the name=\'93 \'93 in your HTML form\'92s input tag will be the key you pass to $_GET, $_POST, etc. \
\
cookies are stored locally on the user\'92s computer - they keep users logged in on websites and help generate user pages, say on Facebook, quickly\
\
UPLOADING FILES\
\
when uploading files, be sure to use \'91enctype\'92 in your form tag and type=\'91file\'92 in the input tag}